# Pull request check and validation workflow
name: Validate PR

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - "master"

concurrency:
  # If there's a PR number, it will result in cancelling the previous build for that PR
  # this is needed because the PR event triggers on "meta" PR things, like comments but not pushes
  group: ${{ github.workflow }}-${{ github.ref_name }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

env:
  RUST_BACKTRACE: 1

jobs:
  check-release-version:
    runs-on: [self-hosted, Linux]

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Validate release-version
        run: make validate-release-version assert-clean
      - run: make clean

  check:
    runs-on: [self-hosted, Linux]

    strategy:
      matrix:
        product: [release, rust, js, node-manager-bindings]
      fail-fast: false

    steps:
      - uses: actions/checkout@v3
      - name: Validate ${{matrix.product}}
        run: make validate-${{matrix.product}} assert-clean
      - run: make clean

  check-android:
    runs-on: [self-hosted, Linux]

    steps:
      - uses: actions/checkout@v3
      - name: Validate Android
        run: |
          set -e
          ./jvm/os-android/bin/create-dummy-keystore.sh
          cat jvm/os-android/actyx-local/actyx.properties
          make validate-os-android assert-clean
      - run: make clean

  validate-os:
    runs-on: [self-hosted, Linux]
    needs: check

    steps:
      - uses: actions/checkout@v3
      - run: make validate-os assert-clean
      - run: make clean

  validate-netsim:
    runs-on: [self-hosted, Linux]
    needs: check
    timeout-minutes: 60

    concurrency:
      # Avoid multiple netsim tests running at the same time
      # as they nearly block the system and their error rate
      # is higher when run at the same time
      # In conjunction with the top `concurrency` this should
      # stop PRs from running at the same time as a build
      # for `master`, `release`, etc
      group: validate-netsim
      cancel-in-progress: false

    steps:
      - uses: actions/checkout@v3
      - run: make validate-netsim assert-clean
      - run: make clean

  validate-docs:
    runs-on: [self-hosted, Linux]

    steps:
      # Unlimited fetch depth so the release tool works
      # ALL actions using the release tool NEED this
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Validate docs
        env:
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          NETLIFY_ACCESS_TOKEN: ${{ secrets.NETLIFY_TOKEN }}
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_TOKEN }}
        run: |
          set -e
          echo "Building cosmos-release"
          cd rust/release
          cargo test --locked --release --all-features
          echo "Building docs"
          cd ../../web/developer.actyx.com/
          source ~/.nvm/nvm.sh
          nvm install
          npm ci
          npm run build
          test -n "$NETLIFY_AUTH_TOKEN" && npm run deploy:draft "Validation pipeline"
          make -C ../.. assert-clean
      - run: make clean

  notify-discord:
    runs-on: [self-hosted, Linux]
    if: ${{ always() }}

    needs:
      - check-android
      - validate-os
      - validate-netsim
      - validate-docs

    steps:
      - uses: jmg-duarte/discord-workflow-status@0c3c34d89f51c8ff5d8dd9662b8a850579fb00fb
        with:
          strict: false
          github-token: ${{ secrets.GITHUB_TOKEN }}
          discord-webhook: ${{ secrets.DISCORD_WEBHOOK }}

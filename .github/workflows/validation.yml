name: Run checks

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - "master"

env:
  RUST_BACKTRACE: 1
  RUST_VERSION: 1.72.1

jobs:
  check-rust:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - run: rustup toolchain install --profile default $RUST_VERSION
      - run: |
          sudo apt update
          sudo apt install -y protobuf-compiler
      - run: make validate-rust

  check-js:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - run: make validate-js

  check-release:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - run: rustup toolchain install --profile default $RUST_VERSION
      - run: make validate-release

  check-node-manager-bindings:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - run: rustup toolchain install --profile default $RUST_VERSION
      - run: |
          sudo apt update
          sudo apt install -y protobuf-compiler
      - run: make validate-node-manager-bindings

  check-android:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - run: |
          ./jvm/os-android/bin/create-dummy-keystore.sh
          cat jvm/os-android/actyx-local/actyx.properties
          make validate-os-android

  check-actyx:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - run: rustup toolchain install --profile default $RUST_VERSION
      - run: |
          sudo apt update
          sudo apt install -y protobuf-compiler
      - working-directory: rust/actyx
        run: |
          cargo +$RUST_VERSION fmt --all -- --check
          cargo +$RUST_VERSION --locked clippy --no-deps -- -D warnings
          cargo +$RUST_VERSION --locked clippy --no-deps --tests -- -D warnings

  test-actyx:
    runs-on: ubuntu-22.04
    needs: check-actyx

    strategy:
      fail-fast: false
      matrix:
        package:
          - api
          - ax
          - ax-futures-util
          - certs
          - crypto
          - libp2p-streaming-response
          - node
          - node-ffi
          - node-manager-bindings
          - runtime
          - settings
          - swarm
          - trees
          - util

    steps:
      - uses: actions/checkout@v3
      - run: |
          sudo apt update
          sudo apt install -y protobuf-compiler
      - run: rustup toolchain install --profile default $RUST_VERSION
      - working-directory: rust/actyx/${{ matrix.package }}
        run: |
          cargo +$RUST_VERSION --locked test --all-features

  test-netsim:
    runs-on: ubuntu-22.04
    needs: check-actyx

    strategy:
      fail-fast: false
      matrix:
        command:
          - "./gossip --n-nodes 4 --enable-fast-path"
          - "./gossip --n-nodes 4 --enable-slow-path"
          - "./gossip --n-nodes 4 --enable-root-map"
          - "./gossip_protocol --n-nodes 4"
          - "./root_map --n-nodes 4 --enable-root-map"
          - "./discovery --n-bootstrap 1 --enable-root-map"
          - "./discovery_multi_net"
          - "./discovery_external"
          - "./subscribe --n-nodes 4"
          - "./query --n-nodes 4"
          - "./quickcheck_subscribe"
          - "./quickcheck_interleaved"
          - "./quickcheck_stress_single_store"
          - "./quickcheck_ephemeral"
          - "./versions"
          - "./read_only"

    steps:
      - uses: actions/checkout@v3
      - run: rustup toolchain install --profile default $RUST_VERSION
      - run: |
          sudo apt update
          sudo apt install -y protobuf-compiler
      - working-directory: rust/actyx
        run: cargo +$RUST_VERSION build -q -p swarm-cli -p swarm-harness --release
      - working-directory: rust/actyx/target/release
        # Really weird hack because of the parameters
        run: ${{matrix.command}}

  check-docs:
    runs-on: ubuntu-22.04

    env:
      NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
      NETLIFY_ACCESS_TOKEN: ${{ secrets.NETLIFY_TOKEN }}
      NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_TOKEN }}

    steps:
      # Unlimited fetch depth so the release tool works
      # ALL actions using the release tool NEED this
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Validate docs
        run: |
          set -e
          echo "Building cosmos-release"
          cd rust/release
          cargo test --locked --release --all-features
          echo "Building docs"
          cd ../../web/developer.actyx.com/
          source ~/.nvm/nvm.sh
          nvm install
          npm ci
          npm run build
          npm run deploy:draft "Validation pipeline"
          make -C ../.. assert-clean
      - run: make clean

  notify-discord:
    runs-on: ubuntu-22.04
    if: ${{ always() }}

    needs:
      - check-rust
      - check-js
      - check-release
      - check-node-manager-bindings
      - check-android
      - check-docs
      - check-actyx
      - test-actyx
      - test-netsim

    steps:
      - uses: jmg-duarte/discord-workflow-status@5a826a3e649f9d1157507494d35811ec2f84380c
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          discord-webhook: ${{ secrets.DISCORD_WEBHOOK }}

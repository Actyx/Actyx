name: Generate Artifacts and Release Candidate

# This workflow assumes we are using a single PC for most of the tasks.

# Summary of the required secrets:
# - Artifact Upload
#   - AZURE_BLOB_STORAGE_CONNECTION_STRING
#   - DOCKER_PASSWORD
#   - DOCKER_USERNAME
# - Build Notifications
#   - DISCORD_WEBHOOK

# Summary of the required variables:
# - Artifact upload
#   - BLOB_STORAGE_CONTAINER_CI

# Additional note:
# Actions of "untrusted" sources should be added along with the respective commit hash
# this avoids tag switching, etc.
# See the following link for more information:
# - https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-third-party-actions

on:
  push:
    branches:
      - master
    paths-ignore:
      # Do not run this workflow if the only changes are in the .github directory
      # this should avoid duplicating releases for changes that don't actually belong
      # in releases (CI changes are not shipped with the binaries).
      # If you want to run it anyway, do so manually.
      # See the following link for more information:
      # - https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#example-excluding-paths
      - ".github/**"
  workflow_dispatch:

env:
  BASH_ENV: "~/.bashrc"
  NVM_VERSION: 0.39.3
  RUST_VERSION: 1.65.0

jobs:
  calculate-actyx-version:
    runs-on: [self-hosted, Linux]

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Build release
        working-directory: rust/release
        run: cargo build --release
      - name: Calculate versions
        id: calculate-versions
        working-directory: rust/release/target/release
        run: |
          set -e
          echo "ACTYX_VERSION=$(./cosmos-release get-actyx-version actyx)" >> "$GITHUB_OUTPUT"
          echo "ACTYX_VERSION_CLI=$(./cosmos-release get-actyx-version cli)" >> "$GITHUB_OUTPUT"
          echo "ACTYX_VERSION_NODEMANAGER=$(./cosmos-release get-actyx-version node-manager)" >> "$GITHUB_OUTPUT"
          echo "ACTYX_VERSION_TSSDK=$(./cosmos-release get-actyx-version ts-sdk)" >> "$GITHUB_OUTPUT"
          echo "ACTYX_VERSION_RUSTSDK=$(./cosmos-release get-actyx-version rust-sdk)" >> "$GITHUB_OUTPUT"

    outputs:
      ACTYX_VERSION: ${{ steps.calculate-versions.outputs.ACTYX_VERSION }}
      ACTYX_VERSION_CLI: ${{ steps.calculate-versions.outputs.ACTYX_VERSION_CLI }}
      ACTYX_VERSION_NODEMANAGER: ${{ steps.calculate-versions.outputs.ACTYX_VERSION_NODEMANAGER }}
      ACTYX_VERSION_TSSDK: ${{ steps.calculate-versions.outputs.ACTYX_VERSION_TSSDK }}
      ACTYX_VERSION_RUSTSDK: ${{ steps.calculate-versions.outputs.ACTYX_VERSION_RUSTSDK }}

  make-all-js:
    runs-on: [self-hosted, Linux]
    needs: calculate-actyx-version

    env:
      ACTYX_VERSION: ${{ needs.calculate-actyx-version.outputs.ACTYX_VERSION }}
      ACTYX_VERSION_CLI: ${{ needs.calculate-actyx-version.outputs.ACTYX_VERSION_CLI }}
      ACTYX_VERSION_NODEMANAGER: ${{ needs.calculate-actyx-version.outputs.ACTYX_VERSION_NODEMANAGER }}
      ACTYX_VERSION_TSSDK: ${{ needs.calculate-actyx-version.outputs.ACTYX_VERSION_TSSDK }}
      ACTYX_VERSION_RUSTSDK: ${{ needs.calculate-actyx-version.outputs.ACTYX_VERSION_RUSTSDK }}

    steps:
      - uses: actions/checkout@v3
      - name: Make All JavaScript
        run: make all-js assert-clean
        env:
          ACTYX_PUBLIC_KEY: ${{ secrets.ACTYX_PUBLIC_KEY }}
      - uses: fixpoint/azblob-upload-artifact@41eaaaa8fa50a5ba144d1d106c0e4ca11ca60c08
        with:
          connection-string: ${{secrets.AZURE_BLOB_STORAGE_CONNECTION_STRING}}
          container: ${{ vars.BLOB_STORAGE_CONTAINER_CI }}
          name: ${{github.sha}}/js-packages
          path: dist/js
      - run: make clean

  make-all-linux:
    runs-on: [self-hosted, Linux]
    needs: calculate-actyx-version

    env:
      ACTYX_VERSION: ${{ needs.calculate-actyx-version.outputs.ACTYX_VERSION }}
      ACTYX_VERSION_CLI: ${{ needs.calculate-actyx-version.outputs.ACTYX_VERSION_CLI }}
      ACTYX_VERSION_NODEMANAGER: ${{ needs.calculate-actyx-version.outputs.ACTYX_VERSION_NODEMANAGER }}
      ACTYX_VERSION_TSSDK: ${{ needs.calculate-actyx-version.outputs.ACTYX_VERSION_TSSDK }}
      ACTYX_VERSION_RUSTSDK: ${{ needs.calculate-actyx-version.outputs.ACTYX_VERSION_RUSTSDK }}

    steps:
      - uses: actions/checkout@v3
      - name: Make All Linux
        run: make all-linux assert-clean
        env:
          ACTYX_PUBLIC_KEY: ${{ secrets.ACTYX_PUBLIC_KEY }}
      - uses: fixpoint/azblob-upload-artifact@41eaaaa8fa50a5ba144d1d106c0e4ca11ca60c08
        with:
          connection-string: ${{secrets.AZURE_BLOB_STORAGE_CONNECTION_STRING}}
          container: ${{ vars.BLOB_STORAGE_CONTAINER_CI }}
          name: ${{github.sha}}/linux-binaries
          path: dist/bin
      - run: make clean

  make-all-windows:
    runs-on: [self-hosted, Linux]
    needs: calculate-actyx-version

    env:
      ACTYX_VERSION: ${{ needs.calculate-actyx-version.outputs.ACTYX_VERSION }}
      ACTYX_VERSION_CLI: ${{ needs.calculate-actyx-version.outputs.ACTYX_VERSION_CLI }}
      ACTYX_VERSION_NODEMANAGER: ${{ needs.calculate-actyx-version.outputs.ACTYX_VERSION_NODEMANAGER }}
      ACTYX_VERSION_TSSDK: ${{ needs.calculate-actyx-version.outputs.ACTYX_VERSION_TSSDK }}
      ACTYX_VERSION_RUSTSDK: ${{ needs.calculate-actyx-version.outputs.ACTYX_VERSION_RUSTSDK }}

    steps:
      - uses: actions/checkout@v3
      - name: Make All Windows
        run: make all-windows assert-clean
        env:
          ACTYX_PUBLIC_KEY: ${{ secrets.ACTYX_PUBLIC_KEY }}
          WIN_CODESIGN_CERTIFICATE: ${{ secrets.WIN_CODESIGN_CERTIFICATE }}
          WIN_CODESIGN_PASSWORD: ${{ secrets.WIN_CODESIGN_PASSWORD }}
      - uses: fixpoint/azblob-upload-artifact@41eaaaa8fa50a5ba144d1d106c0e4ca11ca60c08
        with:
          connection-string: ${{secrets.AZURE_BLOB_STORAGE_CONNECTION_STRING}}
          container: ${{ vars.BLOB_STORAGE_CONTAINER_CI }}
          name: ${{github.sha}}/windows-binaries
          path: dist/bin
      - run: make clean

  make-all-macos:
    runs-on: [self-hosted, Linux]
    needs: calculate-actyx-version

    env:
      ACTYX_VERSION: ${{ needs.calculate-actyx-version.outputs.ACTYX_VERSION }}
      ACTYX_VERSION_CLI: ${{ needs.calculate-actyx-version.outputs.ACTYX_VERSION_CLI }}
      ACTYX_VERSION_NODEMANAGER: ${{ needs.calculate-actyx-version.outputs.ACTYX_VERSION_NODEMANAGER }}
      ACTYX_VERSION_TSSDK: ${{ needs.calculate-actyx-version.outputs.ACTYX_VERSION_TSSDK }}
      ACTYX_VERSION_RUSTSDK: ${{ needs.calculate-actyx-version.outputs.ACTYX_VERSION_RUSTSDK }}

    steps:
      - uses: actions/checkout@v3
      - name: Make All MacOS
        run: make all-macos assert-clean
        env:
          ACTYX_PUBLIC_KEY: ${{ secrets.ACTYX_PUBLIC_KEY }}
      - uses: fixpoint/azblob-upload-artifact@41eaaaa8fa50a5ba144d1d106c0e4ca11ca60c08
        with:
          connection-string: ${{secrets.AZURE_BLOB_STORAGE_CONNECTION_STRING}}
          container: ${{ vars.BLOB_STORAGE_CONTAINER_CI }}
          name: ${{github.sha}}/macos-binaries
          path: dist/bin
      - run: make clean

  make-docker:
    runs-on: [self-hosted, Linux]
    needs: calculate-actyx-version

    env:
      ACTYX_VERSION: ${{ needs.calculate-actyx-version.outputs.ACTYX_VERSION }}
      ACTYX_VERSION_CLI: ${{ needs.calculate-actyx-version.outputs.ACTYX_VERSION_CLI }}
      ACTYX_VERSION_NODEMANAGER: ${{ needs.calculate-actyx-version.outputs.ACTYX_VERSION_NODEMANAGER }}
      ACTYX_VERSION_TSSDK: ${{ needs.calculate-actyx-version.outputs.ACTYX_VERSION_TSSDK }}
      ACTYX_VERSION_RUSTSDK: ${{ needs.calculate-actyx-version.outputs.ACTYX_VERSION_RUSTSDK }}

    steps:
      - uses: actions/checkout@v3
      - name: Make Docker
        run: |
          MAIN_REPO="Actyx/Actyx"
          # The shell GitHub uses is already "-e" hence we need to avoid termination
          CHECK_FORK=`git remote get-url origin | grep -o "$MAIN_REPO" || echo ""`

          GIT_COMMIT=`git rev-parse HEAD`
          HEAD_OF_MASTER=`git rev-parse origin/master`

          # Check if we're running on the main repo as well
          # This stops forks from pushing using "latest" by default
          if [ "$CHECK_FORK" == "Actyx/Actyx" && "$GIT_COMMIT" == "$HEAD_OF_MASTER"]; then
            echo "Running on Actyx/Actyx HEAD of master ($(HEAD_OF_MASTER)), tagging image as latest"
            make -e ADDITIONAL_DOCKER_ARGS="--tag actyx/actyx-ci:actyx-latest" docker-push-actyx
          else
            make docker-push-actyx
          fi

          make assert-clean
        env:
          ACTYX_PUBLIC_KEY: ${{ secrets.ACTYX_PUBLIC_KEY }}

  make-all-android:
    runs-on: [self-hosted, Linux]
    needs: calculate-actyx-version

    env:
      ACTYX_VERSION: ${{ needs.calculate-actyx-version.outputs.ACTYX_VERSION }}
      ACTYX_VERSION_CLI: ${{ needs.calculate-actyx-version.outputs.ACTYX_VERSION_CLI }}
      ACTYX_VERSION_NODEMANAGER: ${{ needs.calculate-actyx-version.outputs.ACTYX_VERSION_NODEMANAGER }}
      ACTYX_VERSION_TSSDK: ${{ needs.calculate-actyx-version.outputs.ACTYX_VERSION_TSSDK }}
      ACTYX_VERSION_RUSTSDK: ${{ needs.calculate-actyx-version.outputs.ACTYX_VERSION_RUSTSDK }}

    steps:
      - uses: actions/checkout@v3
      - name: Make All Android
        run: make all-android assert-clean
        env:
          ACTYX_PUBLIC_KEY: ${{ secrets.ACTYX_PUBLIC_KEY }}
          ACTYX_ANDROID_CERTIFICATES: ${{ secrets.ACTYX_ANDROID_CERTIFICATES }}
      - uses: fixpoint/azblob-upload-artifact@41eaaaa8fa50a5ba144d1d106c0e4ca11ca60c08
        with:
          connection-string: ${{secrets.AZURE_BLOB_STORAGE_CONNECTION_STRING}}
          container: ${{ vars.BLOB_STORAGE_CONTAINER_CI }}
          name: ${{github.sha}}/android-binaries
          path: dist/bin
      - run: make clean

  make-node-manager-linux:
    runs-on: [self-hosted, Linux]
    needs: calculate-actyx-version

    env:
      ACTYX_VERSION: ${{ needs.calculate-actyx-version.outputs.ACTYX_VERSION }}
      ACTYX_VERSION_CLI: ${{ needs.calculate-actyx-version.outputs.ACTYX_VERSION_CLI }}
      ACTYX_VERSION_NODEMANAGER: ${{ needs.calculate-actyx-version.outputs.ACTYX_VERSION_NODEMANAGER }}
      ACTYX_VERSION_TSSDK: ${{ needs.calculate-actyx-version.outputs.ACTYX_VERSION_TSSDK }}
      ACTYX_VERSION_RUSTSDK: ${{ needs.calculate-actyx-version.outputs.ACTYX_VERSION_RUSTSDK }}

    steps:
      - uses: actions/checkout@v3
      - name: Make Node Manager Linux
        run: make node-manager-mac-linux
      - uses: fixpoint/azblob-upload-artifact@41eaaaa8fa50a5ba144d1d106c0e4ca11ca60c08
        with:
          connection-string: ${{secrets.AZURE_BLOB_STORAGE_CONNECTION_STRING}}
          container: ${{ vars.BLOB_STORAGE_CONTAINER_CI }}
          name: ${{github.sha}}/node-manager-linux
          path: js/node-manager/dist/artifacts
      - run: make clean

  make-node-manager-windows:
    runs-on: [self-hosted, Linux]
    needs: calculate-actyx-version

    env:
      ACTYX_VERSION: ${{ needs.calculate-actyx-version.outputs.ACTYX_VERSION }}
      ACTYX_VERSION_CLI: ${{ needs.calculate-actyx-version.outputs.ACTYX_VERSION_CLI }}
      ACTYX_VERSION_NODEMANAGER: ${{ needs.calculate-actyx-version.outputs.ACTYX_VERSION_NODEMANAGER }}
      ACTYX_VERSION_TSSDK: ${{ needs.calculate-actyx-version.outputs.ACTYX_VERSION_TSSDK }}
      ACTYX_VERSION_RUSTSDK: ${{ needs.calculate-actyx-version.outputs.ACTYX_VERSION_RUSTSDK }}

    steps:
      - uses: actions/checkout@v3
      - name: Make Node Manager Windows
        run: make node-manager-win
      - uses: fixpoint/azblob-upload-artifact@41eaaaa8fa50a5ba144d1d106c0e4ca11ca60c08
        with:
          connection-string: ${{secrets.AZURE_BLOB_STORAGE_CONNECTION_STRING}}
          container: ${{ vars.BLOB_STORAGE_CONTAINER_CI }}
          name: ${{github.sha}}/node-manager-win
          path: js/node-manager/dist/artifacts
      - run: make clean

  make-node-manager-macos:
    runs-on: macos-12
    needs: calculate-actyx-version

    env:
      # We need python2 for electron-builder 22.14.13
      PYTHON_PATH: /usr/local/bin/python

      ACTYX_VERSION: ${{ needs.calculate-actyx-version.outputs.ACTYX_VERSION }}
      ACTYX_VERSION_CLI: ${{ needs.calculate-actyx-version.outputs.ACTYX_VERSION_CLI }}
      ACTYX_VERSION_NODEMANAGER: ${{ needs.calculate-actyx-version.outputs.ACTYX_VERSION_NODEMANAGER }}
      ACTYX_VERSION_TSSDK: ${{ needs.calculate-actyx-version.outputs.ACTYX_VERSION_TSSDK }}
      ACTYX_VERSION_RUSTSDK: ${{ needs.calculate-actyx-version.outputs.ACTYX_VERSION_RUSTSDK }}

    steps:
      - uses: actions/checkout@v3
      - name: Setup NVM
        run: curl -o- "https://raw.githubusercontent.com/nvm-sh/nvm/v$NVM_VERSION/install.sh" | bash
      - name: Setup Rust
        run: curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain "$RUST_VERSION" -y
      - name: Install make & protobuf
        run: brew install make protobuf
      - name: Make Node Manager Mac
        run: gmake node-manager-mac-linux
      - uses: fixpoint/azblob-upload-artifact@41eaaaa8fa50a5ba144d1d106c0e4ca11ca60c08
        with:
          connection-string: ${{secrets.AZURE_BLOB_STORAGE_CONNECTION_STRING}}
          container: ${{ vars.BLOB_STORAGE_CONTAINER_CI }}
          name: ${{github.sha}}/node-manager-mac
          path: js/node-manager/dist/artifacts

  create-release-candidate:
    runs-on: [self-hosted, Linux]
    if: ${{ github.ref == 'refs/heads/master' }}

    needs:
      # We need to depend on this one to be able to access the "needs" context
      - calculate-actyx-version
      - make-all-js
      - make-all-linux
      - make-all-windows
      - make-all-macos
      - make-all-android
      - make-node-manager-linux
      - make-node-manager-windows
      - make-node-manager-macos
      - make-docker

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Create a release candidate
        id: create-rc
        run: cargo run --release -- release
        working-directory: rust/release
        # If everything works, it creates a RELEASE_BRANCH output
      - name: Create a PR
        if: ${{steps.create-rc.outputs.RELEASE_BRANCH != ''}}
        # Requires the `gh` tool (duh!)
        # https://github.com/cli/cli/blob/trunk/docs/install_linux.md
        # Explanation - create a PR from master to RELEASE_BRANCH with the provided title
        # Relevant code in gh pr create:
        # - https://github.com/cli/cli/blob/343896fdac9ee1aeee7152f66765832c31cc87f6/pkg/cmd/pr/create/create.go#L284-L290
        # - https://github.com/cli/cli/blob/343896fdac9ee1aeee7152f66765832c31cc87f6/pkg/cmd/pr/create/create.go#L395-L423
        run: gh pr create --base master --head ${{steps.create-rc.outputs.RELEASE_BRANCH}} --fill
        # The GitHub CLI reads this value to login automatically
        # https://cli.github.com/manual/gh_auth_login
        env:
          GH_TOKEN: ${{ secrets.GENIE_GH_TOKEN }}

  notify-discord:
    runs-on: [self-hosted, Linux]
    if: ${{ always() }}

    needs:
      - create-release-candidate

    steps:
      - uses: jmg-duarte/discord-workflow-status@5a826a3e649f9d1157507494d35811ec2f84380c
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          discord-webhook: ${{ secrets.DISCORD_WEBHOOK }}

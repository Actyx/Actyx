apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlinx-serialization'
apply plugin: 'org.jlleitschuh.gradle.ktlint'
apply plugin: 'com.gladed.androidgitversion'
apply plugin: 'kotlin-kapt'
apply from: './ipfs.gradle'
apply from: '../actyx-local/actyx.properties'
apply plugin: 'com.google.protobuf'

androidGitVersion {
  prefix 'os-android-'
  codeFormat 'MNNPPPBBB'
  format '%tag%%-count%%commit%%-branch%%-dirty%'
  hideBranches = ['master']
  baseCode 0
}

android {
  compileSdkVersion 29
  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }
  kotlinOptions {
    jvmTarget = "1.8"
  }
  buildToolsVersion '29.0.2'
  defaultConfig {
    applicationId 'com.actyx.os.android'
    minSdkVersion 23
    targetSdkVersion 29
    versionCode 1
    versionName '0.1'
    testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    buildConfigField "int", "MIN_SDK_API_LEVEL", "$minSdkVersion.apiLevel"
  }
  signingConfigs {
    release {
      storeFile file(actyxKeystoreName)
      keyAlias actyxKeyAlias
      storePassword actyxKeystorePassword
      keyPassword actyxKeyPassword
    }
  }
  buildTypes {
    release {
      signingConfig signingConfigs.release
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
    }
  }
  ktlint {
    android = true
  }
    sourceSets {
        main {
            java.srcDirs += "${protobuf.generatedFilesBaseDir}/main/javalite"
            proto {
                srcDir '../../../protocols/protobuf'
            }
        }
    }
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.0.0'
    }
    plugins {
        javalite {
            artifact = 'com.google.protobuf:protoc-gen-javalite:3.0.0'
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                remove java
            }
            task.plugins {
                javalite { }
            }
        }
    }
}

def arrow_version = "0.10.4"
def nav_version = "2.2.2"
dependencies {
  implementation fileTree(dir: 'libs', include: ['*.jar'])
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
  implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:0.14.0"
  implementation 'androidx.appcompat:appcompat:1.1.0'
  implementation 'androidx.recyclerview:recyclerview:1.1.0'
  implementation 'androidx.core:core-ktx:1.2.0'
  implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
  implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
  implementation "androidx.navigation:navigation-ui-ktx:$nav_version"
  implementation 'com.google.android.material:material:1.1.0'
  implementation 'org.yaml:snakeyaml:1.23'
  implementation 'com.koushikdutta.async:androidasync:2.2.1'
  implementation 'org.apache.commons:commons-compress:1.19'
  implementation 'io.reactivex.rxjava2:rxkotlin:2.4.0'
  implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
  implementation 'com.github.davidmoten:rxjava2-extras:0.1.35'
  implementation 'net.java.dev.jna:jna:5.4.0@aar'
  implementation 'dnsjava:dnsjava:2.1.8'
  implementation 'org.slf4j:slf4j-api:1.7.25'
  implementation 'com.github.tony19:logback-android:1.3.0-2'
  implementation 'com.google.protobuf:protobuf-lite:3.0.0'
  implementation 'org.mozilla.appservices:support:0.16.1'
  implementation "io.arrow-kt:arrow-core:$arrow_version"
  implementation "io.arrow-kt:arrow-syntax:$arrow_version"
  kapt           "io.arrow-kt:arrow-meta:$arrow_version"
  implementation 'com.squareup.okhttp3:okhttp:4.3.1'
  implementation 'com.networknt:json-schema-validator:1.0.29'
  testImplementation 'junit:junit:4.12'
  testImplementation 'io.kotlintest:kotlintest-runner-junit5:3.3.2'
  androidTestImplementation 'androidx.test:runner:1.2.0'
  androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
  //  LEGACY USB
  implementation 'com.github.felHR85:UsbSerial:6.1.0'
}

def archs = ["x86", "arm64-v8a"]
def nativeLibs = ["axosnode"]
task checkExternalLibsExist() {
  [archs, nativeLibs].eachCombination { arch, lib ->
    assert file("./src/main/jniLibs/${arch}/lib${lib}.so").exists()
  }
}
assemble.dependsOn checkExternalLibsExist
preBuild.dependsOn unpackIpfs

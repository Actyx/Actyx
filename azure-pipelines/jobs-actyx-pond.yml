jobs:
  - job: buildAndUnitTest
    dependsOn: getBuildString
    variables:
      BUILD_STRING: $[ dependencies.getBuildString.outputs['setBuildString.BUILD_STRING'] ]
    displayName: Build & Unit-test
    workspace:
      clean: all
    pool:
      name: Native
    container: node:12.19-buster
    steps:
      - script: |
          set -e
          npm i
        displayName: Install dependencies
        workingDirectory: "js/pond"
        condition: and(contains(variables['BUILD_STRING'],'[build-actyx-pond]'),succeeded())
      - script: |
          set -e
          npm run build:prod
        displayName: Build
        workingDirectory: "js/pond"
        condition: and(contains(variables['BUILD_STRING'],'[build-actyx-pond]'),succeeded())
      - script: |
          mkdir -p package
          mv `npm pack` package
        displayName: Pack
        workingDirectory: "js/pond"
        condition: and(contains(variables['BUILD_STRING'],'[build-actyx-pond]'),succeeded())
      - publish: $(System.DefaultWorkingDirectory)/js/pond/package
        artifact: actyx-pond
        condition: and(contains(variables['BUILD_STRING'],'[build-actyx-pond]'),succeeded())
      - task: AzureCLI@2
        # No, there would be the nicely looking AzureFileCopy@4 task, which would use the `azcopy` cli (yes, it's not
        # included in `az`), to upload a bunch of files:
        # https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/deploy/azure-file-copy?view=azure-devops.
        #
        # Now, that task currently only works under Windows.
        # Next up: Directly use `azcopy`. No built-in authentication via azure pipelines, bummer.
        # Luckily, the `az` cli offers a legacy command `storage  blob upload-batch`.
        displayName: Copy artifacts to az blob store
        inputs:
          azureSubscription: azure-ax-ci
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: |
            /usr/bin/az --version
            /usr/bin/az account show
            /usr/bin/az storage blob upload-batch -s $(System.DefaultWorkingDirectory)/js/pond/package/ -d https://axartifacts.blob.core.windows.net/artifacts/ --destination-path $(Build.SourceVersion)/
        condition: and(contains(variables['BUILD_STRING'],'[build-actyx-pond]'),succeeded())
      - script: |
          build/bin/post-to-slack.sh -s "Actyx Pond" -a "danger"
        displayName: Ping Slack on failing job
        condition: failed()

jobs:
  - job: mainModuleContainers
    dependsOn: getBuildString
    variables:
      BUILD_STRING: $[ dependencies.getBuildString.outputs['setBuildString.BUILD_STRING'] ]
    displayName: "Container:"
    pool:
      name: Native
    timeoutInMinutes: 0
    strategy:
      matrix:
        headless-x64:
          DOCKER_TAG: "headless-x64"
        nodered-x64:
          DOCKER_TAG: "nodered-x64"
        node-x64:
          DOCKER_TAG: "node-x64"
        ipfs-x64:
          DOCKER_TAG: "ipfs-x64"
        headless-armv7hf:
          DOCKER_TAG: "headless-armv7hf"
        nodered-armv7hf:
          DOCKER_TAG: "nodered-armv7hf"
        node-armv7hf:
          DOCKER_TAG: "node-armv7hf"
        ipfs-armv7hf:
          DOCKER_TAG: "ipfs-armv7hf"
        buildrs:
          DOCKER_TAG: "buildrs-x64"
          DOCKER_REPO: "actyx/util"
        buildnode:
          DOCKER_TAG: "buildnode-x64"
          DOCKER_REPO: "actyx/util"
        wininstallercreator:
          DOCKER_TAG: "windowsinstallercreator-x64"
          DOCKER_REPO: "actyx/util"
        balenaremoteforward:
          DOCKER_TAG: "balenaremoteforward-x64"
        musl:
          DOCKER_TAG: "musl-x64"
        opscli-x64:
          DOCKER_TAG: "opscli-x64"
        tamshot-x64:
          DOCKER_TAG: "tamshot-x64"
        smcec-x64:
          DOCKER_TAG: "smcec-x64"
        smcec-armv7hf:
          DOCKER_TAG: "smcec-armv7hf"
        smcec-aarch64:
          DOCKER_TAG: "smcec-aarch64"
        smapp-x64:
          DOCKER_TAG: "smapp-x64"
        smapp-armv7hf:
          DOCKER_TAG: "smapp-armv7hf"
        smapp-aarch64:
          DOCKER_TAG: "smapp-aarch64"
        smvnc-x64:
          DOCKER_TAG: "smvnc-x64"
        smvnc-armv7hf:
          DOCKER_TAG: "smvnc-armv7hf"
        smvnc-aarch64:
          DOCKER_TAG: "smvnc-aarch64"
        timescaledb-x64:
          DOCKER_TAG: "timescaledb-x64"
    steps:
      - script: |
          printf "Setting CURRENT_CONTAINER_BUILD_TAG to [build-$DOCKER_TAG]\n"
          echo "##vso[task.setvariable variable=CURRENT_CONTAINER_BUILD_TAG][build-$DOCKER_TAG]"
        displayName: Set $CURRENT_CONTAINER_BUILD_TAG

      - script: |
          build/bin/install-vault.sh
        env:
          # Map secrets to env vars
          AWS_ACCESS_KEY_ID: $(SECRET_AWS_ACCESS_KEY_ID)
          AWS_SECRET_ACCESS_KEY: $(SECRET_AWS_SECRET_ACCESS_KEY)
        condition: contains(variables['BUILD_STRING'],variables['CURRENT_CONTAINER_BUILD_TAG'])
        displayName: Setup Vault

      - script: |
          set -e
          make docker-push-`echo $DOCKER_TAG|cut -f1 -d-`
          export VAULT_ADDR=https://vault.actyx.net
          $HOME/bin/vault login -method aws role=ops-travis-ci 2>&1 > /dev/null
        env:
          DOCKERHUB_PASS: $(SECRET_DOCKERHUB_PASS)
          GITHUB_PKG_PASS: $(SECRET_GITHUB_PKG_PASS)
          AWS_ACCESS_KEY_ID: $(SECRET_AWS_ACCESS_KEY_ID)
          AWS_SECRET_ACCESS_KEY: $(SECRET_AWS_SECRET_ACCESS_KEY)
        condition: contains(variables['BUILD_STRING'],variables['CURRENT_CONTAINER_BUILD_TAG'])
        displayName: Build $(DOCKER_TAG)

      - script: |
          build/bin/post-to-slack.sh -s "Main Container - $DOCKER_TAG" -a "danger"
        condition: failed()
        displayName: "Ping Slack on failing job"

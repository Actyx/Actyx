jobs:
  - job: mainModuleContainers
    dependsOn: getBuildString
    variables:
      BUILD_STRING: $[ dependencies.getBuildString.outputs['setBuildString.BUILD_STRING'] ]
    displayName: 'Container:'
    pool:
      name: Native
    timeoutInMinutes: 0
    strategy:
      matrix:
        ipfs-x64:
          DOCKER_TAG: 'ipfs-x64'
        ipfs-armv7hf:
          DOCKER_TAG: 'ipfs-armv7hf'
        wininstallercreator:
          DOCKER_TAG: 'windowsinstallercreator-x64'
          DOCKER_REPO: 'actyx/util'
    steps:
      - script: |
          printf "Setting CURRENT_CONTAINER_BUILD_TAG to [build-$DOCKER_TAG]\n"
          echo "##vso[task.setvariable variable=CURRENT_CONTAINER_BUILD_TAG][build-$DOCKER_TAG]"
        displayName: Set $CURRENT_CONTAINER_BUILD_TAG

      - script: |
          build/bin/install-vault.sh
        env:
          # Map secrets to env vars
          AWS_ACCESS_KEY_ID: $(SECRET_AWS_ACCESS_KEY_ID)
          AWS_SECRET_ACCESS_KEY: $(SECRET_AWS_SECRET_ACCESS_KEY)
        condition: contains(variables['BUILD_STRING'],variables['CURRENT_CONTAINER_BUILD_TAG'])
        displayName: Setup Vault

      - script: |
          set -e
          make docker-push-`echo $DOCKER_TAG|cut -f1 -d-`
          export VAULT_ADDR=https://vault.actyx.net
          $HOME/bin/vault login -method aws role=ops-travis-ci 2>&1 > /dev/null
        env:
          DOCKERHUB_PASS: $(SECRET_DOCKERHUB_PASS)
          GITHUB_PKG_PASS: $(SECRET_GITHUB_PKG_PASS)
          AWS_ACCESS_KEY_ID: $(SECRET_AWS_ACCESS_KEY_ID)
          AWS_SECRET_ACCESS_KEY: $(SECRET_AWS_SECRET_ACCESS_KEY)
        condition: contains(variables['BUILD_STRING'],variables['CURRENT_CONTAINER_BUILD_TAG'])
        displayName: Build $(DOCKER_TAG)

      - script: |
          build/bin/post-to-slack.sh -s "Main Container - $DOCKER_TAG" -a "danger"
        condition: failed()
        displayName: 'Ping Slack on failing job'

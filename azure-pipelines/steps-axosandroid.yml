steps:
    # Since this build doesn't depend on rt-master, we can at least do the checks before we build the release
  - bash: |
      cargo fmt --all -- --check && \
      cargo --locked clippy -- -D warnings && \
      cargo --locked clippy --tests -- -D warnings && \
      for i in i686 aarch64; do \
        cargo --locked build -p ax-os-node --lib --release --target $i-linux-android; \
      done && \
      mkdir -p ../android-actyxos-app/app/src/main/jniLibs/x86/ && \
      cp ./target/i686-linux-android/release/libaxosnode.so ../android-actyxos-app/app/src/main/jniLibs/x86/ && \
      mkdir -p ../android-actyxos-app/app/src/main/jniLibs/arm64-v8a/ && \
      cp ./target/aarch64-linux-android/release/libaxosnode.so ../android-actyxos-app/app/src/main/jniLibs/arm64-v8a/
    displayName: 'Build rust libs (x86, aarch64)'
    workingDirectory: 'rt-master'
    condition: contains(variables['BUILD_STRING'],'[build-axosandroid]')
  - script: |
      export VAULT_ADDR=https://vault.actyx.net
      export PATH=$HOME/bin:$PATH
      vault login -method aws role=ops-travis-ci 2>&1
      android-actyxos-app/bin/get-keystore.sh
    displayName: 'Get keystore'
    env:
      # Map secrets to env vars
      AWS_ACCESS_KEY_ID: $(SECRET_AWS_ACCESS_KEY_ID)
      AWS_SECRET_ACCESS_KEY: $(SECRET_AWS_SECRET_ACCESS_KEY)
      PATH: $(PATH):$(HOME)/bin
    condition: contains(variables['BUILD_STRING'],'[build-axosandroid]')
  - task: Gradle@2
    inputs:
      workingDirectory: 'android-actyxos-app'
      gradleWrapperFile: 'android-actyxos-app/gradlew'
      jdkVersionOption: 1.8
      javaHomeOption: 'JDKVersion'
      tasks: 'clean ktlintCheck build assembleRelease androidGitVersion'
    displayName: 'Compile ActyxOS on Android (x86)'
    env:
      JAVA_HOME_8_X64: /usr/lib/jvm/java-8-openjdk-amd64
    condition: and(succeeded(),contains(variables['BUILD_STRING'],'[build-axosandroid]'))

  - task: ShellScript@2
    inputs:
      scriptPath: android-actyxos-app/bin/upload-ipfs.sh
    displayName: 'Upload to IPFS'
    condition: and(succeeded(),contains(variables['BUILD_STRING'],'[build-axosandroid]'))

  - publish: $(System.DefaultWorkingDirectory)/android-actyxos-app/app/build/outputs/assembly/Actyx/axosandroid/
    artifact: actyxos-apk
    condition: and(succeeded(),contains(variables['BUILD_STRING'],'[build-axosandroid]'))

  - task: AzureCLI@2
    # No, there would be the nicely looking AzureFileCopy@4 task, which would use the `azcopy` cli (yes, it's not
    # included in `az`), to upload a bunch of files:
    # https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/deploy/azure-file-copy?view=azure-devops.
    #
    # Now, that task currently only works under Windows.
    # Next up: Directly use `azcopy`. No built-in authentication via azure pipelines, bummer.
    # Luckily, the `az` cli offers a legacy command `storage  blob upload-batch`, which doesn't work recursively, but that's not that an
    # issue for our current use-case. So we use that.
    displayName: Copy artifacts to az blob store
    inputs:
      azureSubscription: azure-ax-ci
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        az --version
        az account show
        az storage blob upload-batch -s $(System.DefaultWorkingDirectory)/android-actyxos-app/app/build/outputs/assembly/Actyx/axosandroid/$(Build.SourceVersion) -d https://axartifacts.blob.core.windows.net/artifacts/ --destination-path $(Build.SourceVersion)/android/
    condition: and(succeeded(),contains(variables['BUILD_STRING'],'[build-axosandroid]'))

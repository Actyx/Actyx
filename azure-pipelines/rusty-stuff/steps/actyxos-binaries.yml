steps:
  - template: ../../steps-bootstrap.yml
  # Since these builds don't depend on rt-master, we can at least do the checks before we build the release
  # For windows build, ax-cli needs the `--no-default-features` flag, which cannot be used with
  # virtual workspace. Thus we're using --manifest-path.
  - bash: |
      OUTPUT=../dist/bin/$ARCH
      echo "Building for $TARGET to $OUTPUT."
      cargo fmt --all -- --check && \
      # clippy on windows requires `--no-default-features` which can't be applied on a workspace level
      # cargo --locked clippy -- -D warnings && \
      # cargo --locked clippy --tests -- -D warnings && \
      cargo --locked build --release --no-default-features --manifest-path actyx-cli/Cargo.toml && \
      cargo --locked build --release --bins --no-default-features --manifest-path ax-os-node-win/Cargo.toml && \
      cargo --locked build --release --bin ada-cli --bin store-cli && \
      mkdir -p $OUTPUT && \
      find ./target/$TARGET/release/ -maxdepth 1 -type f -executable  \
        -exec cp {} $OUTPUT \; && \
      ls -alh $OUTPUT/*
    displayName: Build Binaries (win64)
    workingDirectory: 'rt-master'
    condition: and(contains(variables['BUILD_STRING'],'[build-rt-master]'),contains(variables['ARCH'],'win64'))
    env:
      CARGO_BUILD_TARGET: $(TARGET)
      CARGO_BUILD_JOBS: 8
      CARGO_BUILD_INCREMENTAL: false
  - bash: |
      OUTPUT=../dist/bin/$ARCH
      echo "Building for $TARGET to $OUTPUT."
      cargo fmt --all -- --check && \
      cargo --locked clippy -- -D warnings && \
      cargo --locked clippy --tests -- -D warnings && \
      cargo --locked build --release --target $TARGET --bins --jobs 8 && \
      mkdir -p $OUTPUT && \
      find ./target/$TARGET/release/ -maxdepth 1 -type f -executable  \
        -exec cp {} $OUTPUT \; && \
      ls -alh $OUTPUT/*
    displayName: Build Binaries (Linux)
    workingDirectory: 'rt-master'
    condition: and(contains(variables['BUILD_STRING'],'[build-rt-master]'),not(contains(variables['ARCH'],'win64')))
    env:
      CARGO_BUILD_INCREMENTAL: false
  - publish: $(System.DefaultWorkingDirectory)/dist/bin
    artifact: actyxos-bin-$(ARCH)
    condition: and(succeeded(),contains(variables['BUILD_STRING'],'[build-rt-master]'))
  - task: AzureCLI@2
    # No, there would be the nicely looking AzureFileCopy@4 task, which would use the `azcopy` cli (yes, it's not
    # included in `az`), to upload a bunch of files:
    # https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/deploy/azure-file-copy?view=azure-devops.
    #
    # Now, that task currently only works under Windows.
    # Next up: Directly use `azcopy`. No built-in authentication via azure pipelines, bummer.
    # Luckily, the `az` cli offers a legacy command `storage  blob upload-batch`.
    displayName: Copy artifacts to az blob store
    inputs:
      azureSubscription: azure-ax-ci
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        az --version
        az account show
        # artifacts are under <cwd>/dist.bin/$ARCH
        az storage blob upload-batch -s $(System.DefaultWorkingDirectory)/dist/bin -d https://axartifacts.blob.core.windows.net/artifacts/ --destination-path $(Build.SourceVersion)/
    condition: and(succeeded(),contains(variables['BUILD_STRING'],'[build-rt-master]'))
  - bash: |
      build/bin/upload-ipfs.sh ./dist/bin/
    displayName: Upload to IPFS
    condition: and(succeeded(),contains(variables['BUILD_STRING'],'[build-rt-master]'))
  - bash: |
      build/bin/post-to-slack.sh -s "ActyxOS binaries - $ARCH" -a "danger"
    condition: failed()
    displayName: Ping Slack on failing job

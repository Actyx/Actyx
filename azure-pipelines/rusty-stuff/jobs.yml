jobs:
  ##################################################################################################################################
  # All jobs in the pipeline uses the `Native` agent pool, which runs as a systemd service rather than a docker container.         #
  # This means, that it can spawn arbitrary docker containers in order to run the steps as specified in this file.                 #
  # An example is the Android build, which uses an pre-made container (`actyx/cosmos:build-android-rs-x64-latest`) to run the      #
  # build in. This has the advantage of an easier local setup of the relevant tooling, and truly reproducible environments.        #
  ##################################################################################################################################
  - job: rtMaster
    dependsOn: getBuildString
    variables:
      BUILD_STRING: $[ dependencies.getBuildString.outputs['setBuildString.BUILD_STRING'] ]
    container: buildrs_x64_latest
    displayName: rt-master
    workspace:
      clean: all
    pool:
      name: Native
    steps:
      - template: steps/rt-master.yml

  - job: actyxOsSdk
    dependsOn: getBuildString
    variables:
      BUILD_STRING: $[ dependencies.getBuildString.outputs['setBuildString.BUILD_STRING'] ]
    container: buildrs_x64_latest
    displayName: ActyxOS Rust SDK
    workspace:
      clean: all
    pool:
      name: Native
    steps:
      - template: steps/actyxos-rust-sdk.yml

  # The following builds intentionally don't depend on `rtmaster` to speed up overall build times.
  # TODO However, we're building store-lib multiple times: once for each of these, once for the actual store container and once for the actyxOsBinaries below (and SCCACHE sometimes does not work)
  - job: androidShellApp
    dependsOn: getBuildString
    variables:
      BUILD_STRING: $[ dependencies.getBuildString.outputs['setBuildString.BUILD_STRING'] ]
    container: buildrs_x64_latest
    displayName: Android Shell App
    workspace:
      clean: all
    pool:
      name: Native
    steps:
      - template: steps/android-shell-app.yml

  - job: actyxOsAndroid
    dependsOn: getBuildString
    variables:
      BUILD_STRING: $[ dependencies.getBuildString.outputs['setBuildString.BUILD_STRING'] ]
    container: buildrs_x64_latest
    displayName: ActyxOS On Android
    workspace:
      clean: all
    pool:
      name: Native
    steps:
      - template: steps/actyxos-android.yml

  - job: actyxOsBinaries
    dependsOn: getBuildString
    variables:
      BUILD_STRING: $[ dependencies.getBuildString.outputs['setBuildString.BUILD_STRING'] ]
    container: $[ variables['containerImage'] ]
    displayName: "Binaries:"
    # For Smart Builds - might need more granularity per thing in rt-master
    workspace:
      clean: all
    pool:
      name: Native
    strategy:
      matrix:
        win64:
          TARGET: x86_64-pc-windows-gnu
          ARCH: win64
          containerImage: buildrs_x64_latest
        x64:
          TARGET: x86_64-unknown-linux-musl
          ARCH: x64
          containerImage: musl_linux_x64
        arm:
          TARGET: arm-unknown-linux-musleabi
          ARCH: arm
          containerImage: musl_linux_arm
        armv7hf:
          TARGET: armv7-unknown-linux-musleabihf
          ARCH: armv7hf
          containerImage: musl_linux_armv7hf
        aarch64:
          TARGET: aarch64-unknown-linux-musl
          ARCH: aarch64
          containerImage: musl_linux_aarch64
    steps:
      - template: steps/actyxos-binaries.yml

  # Distributed stress testing nightly build
  - job: distributedStressTest
    displayName: Nightly Distributed Stress Test
    variables:
      BUILD_STRING: $[ dependencies.getBuildString.outputs['setBuildString.BUILD_STRING'] ]
    condition: eq(variables['Build.Reason'], 'Schedule') ## run only on Scheduled runs, not on prs or merges to master
    workspace:
      clean: all
    pool:
      name: Native
    steps:
      - template: steps/distributed-stress-test.yml

  - job: actyxOsContainers
    dependsOn: [getBuildString, actyxosbinaries]
    variables:
      BUILD_STRING: $[ dependencies.getBuildString.outputs['setBuildString.BUILD_STRING'] ]
    displayName: "Containers:"
    workspace:
      clean: all
    pool:
      name: Native
    strategy:
      matrix:
        storecli-x64:
          DOCKER_TAG: storecli-x64
          ARCH: x64
        storecli-armv7hf:
          DOCKER_TAG: storecli-armv7hf
          ARCH: armv7hf
        adaclir-x64:
          DOCKER_TAG: adaclir-x64
          ARCH: x64
        adaclir-armv7hf:
          DOCKER_TAG: adaclir-armv7hf
          ARCH: armv7hf
        ax-x64:
          DOCKER_TAG: ax-x64
          ARCH: x64
        actyxos-x64:
          DOCKER_TAG: actyxos-x64
          ARCH: x64
        actyxos-aarch64:
          DOCKER_TAG: actyxos-aarch64
          ARCH: aarch64
        actyxos-armv7hf:
          DOCKER_TAG: actyxos-armv7hf
          ARCH: armv7hf
        actyxos-arm:
          DOCKER_TAG: actyxos-arm
          ARCH: arm
    steps:
      - template: steps/actyxos-containers.yml

  - job: windowsInstallers
    dependsOn: [getBuildString, actyxOsBinaries]
    variables:
      BUILD_STRING: $[ dependencies.getBuildString.outputs['setBuildString.BUILD_STRING'] ]
    container: wininstaller_x64_latest
    displayName: "Windows Installers:"
    workspace:
      clean: all
    pool:
      name: Native
    strategy:
      matrix:
        actyx-os-win64:
          INSTALLER_DIR: misc/actyxos-win-installer
          # FIXME: Derive this from somewhere else
          PRODUCT_VERSION: "1.0.0"
          PRODUCT_NAME: "ActyxOS"
          INSTALLER_NAME: "ActyxOS Installer"
    steps:
      - template: steps/windows-installers.yml

  - job: hammerite
    # TODO Why does this depend on actyxOsContainers? Shouldn't it just depend on the specific ada-clir container?
    dependsOn: [getBuildString, actyxOsContainers]
    variables:
      BUILD_STRING: $[ dependencies.getBuildString.outputs['setBuildString.BUILD_STRING'] ]
    displayName: Hammerite
    workspace:
      clean: all
    pool:
      name: Native
    steps:
      - template: steps/hammerite.yml

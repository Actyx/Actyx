trigger:
  - master
  - release/*

pr: none

variables:
  SLACK_HOOK: ***REMOVED***

stages:
  - stage: publishDocsAndReleases
    pool:
      name: Native
    jobs:
      - job:
        displayName: Publish docs and release candidates (IA)
        steps:
          - checkout: self
            persistCredentials: true
          - bash: |
              set -e
              echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
              echo "++ Diagnostics information +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
              echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
              echo ""
              echo "Build.SourceVersion: $(Build.SourceVersion)"
              echo "Build.SourceBranch: $(Build.SourceBranch)"
              echo "Build.SourceBranchName: $(Build.SourceBranchName)"
              echo "Azure CLI: $(which az)"
              echo ""
              echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
              echo "++ Version changes in this release +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
              echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
              echo ""
              git diff origin/master... ../../versions
              echo ""
              echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
              echo "++ Figuring out how to publish +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
              echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
              echo ""
              publication=none
              if [[ "$(Build.SourceBranch)" = refs/heads/release/* ]]; then
                echo "We are on a release branch and thus releasing a DRAFT"
                publication=draft
              fi
              if [[ "$(Build.SourceBranch)" = refs/heads/master ]]; then
                echo "We are on master and thus releasing to the PUBLIC"
                publication=public
              fi
              echo "publication kind: $publication"
              if [[ "$publication" = none ]]; then
                echo "This is not a draft, nor a final publication; bugging out (note that this shouldn't have happened "
                echo "unless you triggered this CI pipeline manually)."
                exit 0
              fi
              echo ""
              echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
              echo "++ Building the release program ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
              echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
              echo ""
              cargo build --release 
              echo ""
              echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
              echo "++ Versioning history ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
              echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
              echo ""
              echo "Here are all past versions of our products incl. this release"
              for p in actyx cli node-manager; do
                echo "Version history for $p (incl. this release):"
                ./target/release/cosmos-release versions "$p" --commits
              done
              echo ""
              echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
              echo "++ Artifact publication ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
              echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
              echo ""
              artifact_publish_opts=""
              if [[ "$publication" = draft ]]; then
                echo "We are going to do a dry-run of artifact publication since this is DRAFT release"
                artifact_publish_opts="--dry-run"
              fi
              for p in actyx cli node-manager; do
                echo "Publishing $p artifacts:"
                ./target/release/cosmos-release publish "$p" "$artifact_publish_opts"
              done
              echo ""
              echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
              echo "++ Documentation publication +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
              echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
              echo ""
              doc_publish_opts=""
              if [[ "$publication" = public ]]; then
                echo "We are doing a production deploy of the documentation since this is public release"
                doc_publish_opts="--not-draft"
              else
                echo "We are going to do a draft publication of the documentation since this is DRAFT release"
              fi
              source ~/.nvm/nvm.sh
              cd ../../web/developer.actyx.com
              export NETLIFY_ACCESS_TOKEN=***REMOVED***
              echo "Setting up node version"
              nvm install
              nvm use
              echo "Installing doc dependencies"
              npm install
              echo "Building docs"
              npm run build
              echo "Deploying docs"
              npm run deploy -- "Cosmos publish release for $(Build.SourceBranch)" "$doc_publish_opts"
              cd ../../rust/release

              echo ""
              echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
              echo ""
              #cargo run --release -- release
              ## Checking out original commit since release may put us on a new release branch
              #git checkout $(Build.SourceVersion)
            workingDirectory: rust/release
            name: release
            displayName: Task
            env:
              BASH_ENV: "~/.bashrc"
